 LOC 6
 data 1        ;6 constant value 1
 Data 000033   ;7 ptr to the start "Please input number in range [0, 65535]"
 Data 120      ;8 ptr to start of "You entered: "
 data 135      ;9 ptr to start of "Enter target number: "
 data 160      ;10 ptr to start of "Closest number: "
 LOC 12
 data 48       ;12 ascii bit map 11_0000
 data 20        ;13 main loop counter
 data 0        ;14 value of target number
 data 900      ;15 location of final characters to print
 data 560      ;16 Best value found so far
 data 32767    ;17 BestDelta   delta of closest number found so far. effectively all 1s
 Data 0        ;18 Generic swap space
 Data 0        ;19 Swap space for return address
 data 512      ;20 Pointer to "print string" Args: Load x(1) with mem pointer to first character
 data 525      ;21 Address to start of Read Number function. Value will be put in r(2)
 data 560      ;22 Address to start of Saved Digits. reserved until LOC 626
 data 560      ;23 Address to start of Saved Digits. Increment this by 6 to find next one. Used in Find Closest Function
 data 730      ;24 Address of Find Closest function.
 data 750      ;25 Address of loop for Find Closest function
 data 1024     ;26 Address of main function
 data 850      ;27 Address of print closest number function
 LOC 30
 data 800      ;30 Address of user entered VALUES
 data 800      ;31 Address of user entered VALUES  USED IN FIND CLOSEST
 data 200      ;32 Extra memory page

 LOC 200
 data 900     ; 200 + 0   location to store
 data 0       ; 200 + 1
 data 0       ; 200 + 2

 LOC 33		   ;BEGIN AT LOCATION 33
 data 10       ; \n
 Data 000080   ;Data Please input number in range [0, 65535]
 Data 000108   ;Data lease input number in range [0, 65535]
 Data 000101   ;Data ease input number in range [0, 65535]
 Data 000097   ;Data ase input number in range [0, 65535]
 Data 000115   ;Data se input number in range [0, 65535]
 Data 000101   ;Data e input number in range [0, 65535]
 Data 000032   ;Data  input number in range [0, 65535]
 Data 000105   ;Data input number in range [0, 65535]
 Data 000110   ;Data nput number in range [0, 65535]
 Data 000112   ;Data put number in range [0, 65535]
 Data 000117   ;Data ut number in range [0, 65535]
 Data 000116   ;Data t number in range [0, 65535]
 Data 000032   ;Data  number in range [0, 65535]
 Data 000110   ;Data number in range [0, 65535]
 Data 000117   ;Data umber in range [0, 65535]
 Data 000109   ;Data mber in range [0, 65535]
 Data 000098   ;Data ber in range [0, 65535]
 Data 000101   ;Data er in range [0, 65535]
 Data 000114   ;Data r in range [0, 65535]
 Data 000032   ;Data  in range [0, 65535]
 Data 000105   ;Data in range [0, 65535]
 Data 000110   ;Data n range [0, 65535]
 Data 000032   ;Data  range [0, 65535]
 Data 000114   ;Data range [0, 65535]
 Data 000097   ;Data ange [0, 65535]
 Data 000110   ;Data nge [0, 65535]
 Data 000103   ;Data ge [0, 65535]
 Data 000101   ;Data e [0, 65535]
 Data 000032   ;Data  [0, 65535]
 Data 000091   ;Data [0, 65535]
 Data 000048   ;Data 0, 65535]
 Data 000044   ;Data , 65535]
 Data 000032   ;Data  65535]
 Data 000054   ;Data 65535]
 Data 000053   ;Data 5535]
 Data 000053   ;Data 535]
 Data 000051   ;Data 35]
 Data 000053   ;Data 5]
 Data 000093   ;Data ]
 data 10       ; \n
 Data 000000   ;74 Data end of string
 LOC 120
 DATA 89       ;You entered:
 DATA 111      ;ou entered:
 DATA 117      ;u entered:
 DATA 32       ; entered:
 DATA 101      ;entered:
 DATA 110      ;ntered:
 DATA 116      ;tered:
 DATA 101      ;ered:
 DATA 114      ;red:
 DATA 101      ;ed:
 DATA 100      ;d:
 DATA 58       ;:
 DATA 32       ;
 Data 000000   ;Data end of string
 LOC 135
 DATA 10      ;\n
 DATA 69      ;Enter target number:
 DATA 110     ;nter target number:
 DATA 116     ;ter target number:
 DATA 101     ;er target number:
 DATA 114     ;r target number:
 DATA 32      ; target number:
 DATA 116     ;target number:
 DATA 97      ;arget number:
 DATA 114     ;rget number:
 DATA 103     ;get number:
 DATA 101     ;et number:
 DATA 116     ;t number:
 DATA 32      ; number:
 DATA 110     ;number:
 DATA 117     ;umber:
 DATA 109     ; mber:
 DATA 98      ;ber:
 DATA 101     ;er:
 DATA 114     ;r:
 DATA 58      ;:
 Data 000000  ;Data end of string
 LOC 160
 DATA 10      ;\n
 DATA 67      ;Closest number:
 DATA 108     ;losest number:
 DATA 111     ;osest number:
 DATA 115     ;sest number:
 DATA 101     ;est number:
 DATA 115     ;st number:
 DATA 116     ;t number:
 DATA 32      ; number:
 DATA 110     ;number:
 DATA 117     ;umber:
 DATA 109     ;mber:
 DATA 98      ;ber:
 DATA 101     ;er:
 DATA 114     ;r:
 DATA 58      ;:
 DATA 32      ;
 Data 000000  ;Data end of string


 LOC 512      ;Print string function. Set x(1) to be the pointer to the first character of the string
 STR 3,0,19   ; 512 Save return address to well known swap space
 LDR 1,1,0    ; 514 r(1) <- c(x(1) + 0)   Read first character into register 1
 LDR 2,1,0    ; 515 r(1) <- c(x(1) + 0)   Read first character into register 2
 OUT 1,1      ; 516 print character in r(1)
 X2R 1,1      ; 517 r(1) <- x(1)   Load the character ptr into r(1)
 AIR 1,1      ; 518 r(1) <- r(1) + 1  increment the character ptr by 1
 R2X 1,1      ; 519 Put the value in r1 into x(1)
 SETCCE 2     ; 520 Check if the character in r(2) == 0 (the character we just printed)
 JNE 2,0,20,1 ; 521 If the character printed was NOT 0, print loop back
 LDR 3,0,19   ; 522 Return from subroutine, total value is stored in r2
 RFS 0        ; 523






 LOC 525     ; Read number from keyboard (multiple characters). Save result (value) to r(2)
 STR 3,0,19  ; 525 Save return address to well known swap space
 LDX 1,21    ; 526  c(21) => first line of this program => 525
 LDX 2,22    ; 527  c(22) => first spot to save the number value
 LDX 3,22    ; 528  c(22) + 1 => first spot to save the number character string
 AIX 3,1     ; 529

 STR 2,0,18  ; 530 Clear reg 2
 SMR 2,0,18  ; 531

 IN 1,0      ; 532 read ascii character from keyboard into reg 1
 STR 1,3,0   ; 533 Save character into ptr at x(3)
 AIX 3,1     ; 534 increment ptr at x(3)
 SETCCE 1    ; 535 if character (in r1) is null (0000), break
 JZ 1,25     ; 536 550 = x(1) + 25 = 525 + 25
 STR 0,0,18  ; 537 Load immediate value 0000_0000_0000_1111 (15d) into r0
 SMR 0,0,18  ; 538
 AIR 0,15    ; 539
 AND 1,0     ; 540 Bitwise & on c and msk => get value
 STR 0,0,18  ; 541 Load immediate value 10(decimal) into r0
 SMR 0,0,18  ; 542
 AIR 0,10    ; 543
 MLT 2,0     ; 544 Multiply r(2) by r(0), store results to r(2), r(3)
 STR 3,0,18  ; 545 Copy R3 into R2
 LDR 2,0,18  ; 546
 STR 1,0,18  ; 547 Add r1 to r2, store into r2
 AMR 2,0,18  ; 548
 JMA 1,7     ; 549 Loop back and read the next character. 532 = x(1) + 7 = 525 + 7

 LDR 3,0,19  ; 550 Return from subroutine, total value is stored in r2
 RFS 0       ; 551

 LOC 560
 data 00000
 data 00000
 data 00000
 data 00000
 data 00000
 data 00000


 LOC 730        ; Find Closest Function
 ldx 1,24       ;730 x(1) <-- ptr to start of this function = 730
 ldx 3,25       ;731 x(1) <-- ptr to loop subsection
 STR 0,0,18     ;732 r(0) <-- 20
 SMR 0,0,18     ;733
 AIR 0,20       ;734

 LDR 1,0,14     ;735 r(1) <-- targetValue
 SMR 1,0,31,1   ;736 r(1) <-- currentDelta     r(1) <- r(1)-c(c(31)) = target-currentValue
 STR 1,0,18     ;737 Save currentDelta into swap space c(18)
 LDR 3,0,18     ;738 r3 <-- currentDelta    load currentDelta into r(3)
 SRC 3,15,0,1   ;739 Shift r3 >>> 15 to calculate 'y' (effectively full of it's sign bit)
 XOR 1,3        ;740 r1 <- r1 ^ r3  = r1^y
 STR 3,0,18     ;741 c(18) <- r(3)  = y   store y into swap space
 AMR 1,0,18     ;742 r(1) <- r(1)+c(18)  = r(1)+y   Now GPR1 holds currentAbsDelta

 STR 1,0,18     ;743 c(18) <-- currentAbsDelta
 LDR 3,0,18     ;744 r(3)  <-- currentAbsDelta        load currentAbsDelta into r3
 SMR 3,0,17     ;745 r(3) <-- r(3) - BestDelta  = currentAbsDelta-bestDelta

 JGE 3,3,0      ;746 if r(3) >= 0, jump down to SOB command (which will take us to the top of the func)
 STR 1,0,17     ;747 c(17) <-- currentAbsDelta    save currentAbsDelta as BestDelta
 LDR 1,0,31,1   ;748 r(1) <-- current value
 STR 1,0,16     ;749 c(16) <-- current value     save current value as bestSoFar

 LDR 1,0,31     ;750 Increment the current pointer by one
 AIR 1,1        ;751
 STR 1,0,31     ;752
 SOB 0,1,5      ;753 Jump back up to the "top" of function 20 times (skipping the part where we reset r0)

 LDR 3,0,19     ;754 Return from subroutine
 AIR 3,1        ;
 RFS 0          ;755


 LOC 800
 data 0

 LOC 850
 LDR 0,0,16   ; r(0) <-- closest number
 STR 2,0,18   ; Load 10 into r2
 SMR 2,0,18   ;
 AIR 2,10     ;
 LDR 3,0,12   ; r(2) <-- ascii bit mask
 LDX 1,15     ; x(1) <-- 900 (start of character stack)
 DVD 0,2      ; r(0) <-- number/10  r(1) <-- number%10 Divide by 10 to get the remainder
 ORR 1,3      ; r(1) <-- r(1) | r(3)  =  remainder | mask  Bitwise | remainder with ascii map
 STR 1,1,0    ; Store character to stack somewhere loc [900, 904]?

 DVD 0,2      ; r(0) <-- number/10  r(1) <-- number%10 Divide by 10 to get the remainder
 ORR 1,3      ; r(1) <-- r(1) | r(3)  =  remainder | mask  Bitwise | remainder with ascii map
 STR 1,1,1    ; Store character to stack somewhere loc [900, 904]?

 DVD 0,2      ; r(0) <-- number/10  r(1) <-- number%10 Divide by 10 to get the remainder
 ORR 1,3      ; r(1) <-- r(1) | r(2)  =  remainder | mask  Bitwise | remainder with ascii map
 STR 1,1,2    ; Store character to stack somewhere loc [900, 904]?

 DVD 0,2      ; r(0) <-- number/10  r(1) <-- number%10 Divide by 10 to get the remainder
 ORR 1,3      ; r(1) <-- r(1) | r(3)  =  remainder | mask  Bitwise | remainder with ascii map
 STR 1,1,3    ; Store character to stack somewhere loc [900, 904]?

 DVD 0,2      ; r(0) <-- number/10  r(1) <-- number%10 Divide by 10 to get the remainder
 ORR 1,3      ; r(1) <-- r(1) | r(3)  =  remainder | mask  Bitwise | remainder with ascii map
 STR 1,1,4    ; Store character to stack somewhere loc [900, 904]?

 LDR 1,1,4    ; Print the character at 904, 903, 902, 901, 900
 OUT 1,1
 LDR 1,1,3    ; Print the character at 904, 903, 902, 901, 900
 OUT 1,1
 LDR 1,1,2    ; Print the character at 904, 903, 902, 901, 900
 OUT 1,1
 LDR 1,1,1    ; Print the character at 904, 903, 902, 901, 900
 OUT 1,1
 LDR 1,1,0    ; Print the character at 904, 903, 902, 901, 900
 OUT 1,1
 hlt          ; done













 LOC 1024
 STR 0,0,18     ; r(0) <-- 20
 SMR 0,0,18     ;
 AIR 0,20       ;

 STR 0,0,13
 LDX 1,7    ; load x(1) with the address of the first character of the string
 JSR 0,20,1 ; Print string function
 JSR 0,21,1 ; Read in number from console
 LDX 3,30   ; x(2) <- location of user entered VALUES
 STR 2,3,0  ; save r(2) to well known memory location
 AIX 3,1    ;
 STX 3,30   ;
 LDX 2,22   ; x(2) <- location of saved digits
 STR 2,2,0  ; save r(2) to well known memory location
 LDX 1,8    ; Location of first char in "You Entered:"
 JSR 0,20,1 ; print string function
 LDX 1,22   ; Location of saved digits
 AIX 1,1    ;
 JSR 0,20,1 ; print string function
 AIX 1,5    ; Set up pointer to next spot in memory to save a digit: current + 1 + 5
 STX 1,22   ; Store ptr back to c(22)

 LDR 0,0,13
 LDX 1,26
 SOB 0,1,3

 LDX 1,9    ; load x(1) with address of first character "Enter target number: "
 JSR 0,20,1 ; Print string function
 JSR 0,21,1 ; Read number from console
 STR 2,0,14 ; save r(2) to well known memory location: c(14) = target number
 LDX 2,22   ; x(2) <- location of saved digits
 STR 2,2,0  ; save r(2) to well known memory location
 LDX 1,8    ; Location of first char in "You Entered:"
 JSR 0,20,1 ; print string function
 LDX 1,22   ; x(1) <-- Location of saved digits
 AIX 1,1    ; x(1) <-- x(1) + 1  (start of number as characters)
 JSR 0,20,1 ; print string function

 JSR 0,24,1  ; Find closest number function
 LDX 1,10    ; load x(1) with address of first character "closest number":
 JSR 0,20,1  ; print string function
 LDR 1,0,16  ;
 JSR 0,27,1  ; Print closest number function


 hlt
