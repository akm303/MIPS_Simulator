 LOC 6
 data 33   ;6 Ptr to start of "Please enter a sentence "
 data 60   ;7 Ptr to start of "Please enter a target word "
 data 100  ;8 Const Ptr to start of user input paragraph
 data 87   ;9 Const ptr to start of user target word
 data 0    ;10 const value 0

 data 1    ;11 Word count
 data 1    ;12 Sentence count
 data 100  ;13 variable ptr to start of user input paragraph
 data 32   ;14 Const " " space character
 data 46   ;15 const "." period character

 data 0    ;16 Variable current paragraph character
 data 48   ;17 const bit mask for number-to-ascii
 data 0    ;18  Swap space
 data 0    ;19  Storage space for return address
 data 10   ;20  newline character \n

 data 1024 ;21 const Pointer to print string function
 data 1040 ;22 const pointer to read paragraph function
 data 1055 ;23 const pointer to Find_Match function
 data 1100 ;24 const pointer to Print_Found function
 data 1500 ;25 const pointer to Print not found function

 data 1200 ;26 const pointer to start of "Search for word: "
 data 1219 ;27 const ptr to start of "Word not found."
 data 1236 ;28 const ptr to start of "Match for: "
 data 1249 ;29 const ptr to start of "Sentence #"
 data 1261 ;30 const ptr to start of "Word #"

 data 0    ;31
 data 0    ;32

 LOC 33
 Data 80     ; "Please enter a sentence "
 Data 108
 Data 101
 Data 97
 Data 115
 Data 101
 Data 32
 Data 101    ; 40
 Data 110
 Data 116
 Data 101
 Data 114
 Data 32
 Data 97
 Data 32
 Data 115
 Data 101
 Data 110    ; 50
 Data 116
 Data 101
 Data 110
 Data 99
 Data 101
 Data 46
 Data 32
 data 0    ;end of string  Mem = 58

 LOC 60
 data 10     ;  \n
 Data 80    ; String "Please enter target word "
 Data 108
 Data 101
 Data 97
 Data 115
 Data 101
 Data 32
 Data 101
 Data 110
 Data 116     ; 70
 Data 101
 Data 114
 Data 32
 Data 116
 Data 97
 Data 114
 Data 103
 Data 101
 Data 116
 Data 32     ; 80
 Data 119
 Data 111
 Data 114
 data 100
 Data 32
 data 0    ;end of string  Mem = 86

 LOC 87    ; Start of user input target word [87, 98] 11 characters long

 LOC 99
 data 0    ; end of string
 LOC 100   ; Stat of use input paragraph [100, 1023]





 LOC 1024     ; Octal 2000 ; Print String function. Set x(1) to pointer of first character
 STR 3,0,19   ; 1024 Save return address to well known swap space
 LDR 1,1,0    ; 1025 r(1) <- c(x(1) + 0)   Read first character into register 1
 LDR 2,1,0    ; 1026 r(1) <- c(x(1) + 0)   Read first character into register 2
 OUT 1,1      ; 1027 print character in r(1)
 X2R 1,1      ; 1028 r(1) <- x(1)   Load the character ptr into r(1)
 AIR 1,1      ; 1029 r(1) <- r(1) + 1  increment the character ptr by 1
 R2X 1,1      ; 1030 Put the value in r1 into x(1)
 SETCCE 2     ; 1031 Check if the character in r(2) == 0 (the character we just printed)
 JNE 0,21,1   ; 1032 If the character printed was NOT 0, loop back
 LDR 3,0,19   ; 1033 Return from subroutine
 RFS 0        ; 1034



 LOC 1040     ; Read from keyboard function. Set x(3) to pointer of where in mem to save string
 STR 3,0,19   ; 1040 Save return address to well known swap space
 LDX 1,22     ; 1041 x(1) <- c(22)   load x1 with ptr to this function

 IN 1,0       ; 1042  read ascii character from keyboard into reg 1
 STR 1,3,0    ; 1043  Save character into memory at x(3)
 AIX 3,1      ; 1044  x(3) += 1  increment x3 by 1
 SETCCE 1     ; 1045  if character (in r1) is null (0000), break
 JZ 1,8       ; 1046     PC = x(1) + 8 = 1040 + 8 = 1048
 JMA 1,2      ; 1047  Else: Loop back and read the next character. PC = x(1) + 2 = 1040 + 2 = 1042

 LDR 3,0,19   ; 1048 Return from subroutine, total value is stored in r2
 RFS 0        ; 1049





 LOC 1055     ; Find word in paragraph function
 LDX 1,13     ;1055 x(1) <- c(13)   load x1 with ptr to start of user input paragraph
 LDX 2,9      ;1056 x(2) <- c(9)    load x2 with ptr to start of target word
 LDX 3,23     ;1057 x(3) <- c(23)   load x3 with ptr to start of this function
 AIX 3,4      ;1058 x(3) <- x(3) + 4   1055+4 = 1059

 LDR 0,2,0    ;1059 r(0) <- c(x(2))  Load r0 with the target_word character
 LDR 1,1,0    ;1060 r(1) <- c(x(1))  Load r1 with the paragraph character

 SETCCE 0     ;1061 check if r(0) target_word character is null terminator
 JNE 3,6      ;1062 If the character is NOT 0000 then jump to 1059+6 = 1065
 LDX 3,24     ;1063 x(3) <- c(24)      load ptr to Print_Found function
 JMA 3,0      ;1064 Unconditional jump to Print_Found function

 SETCCE 1     ;1065 check if r(1) paragraph character is null terminator
 JNE 3,10     ;1066 If the character is NOT 0000 then jump to 1059+6 = 1069
 LDX 3,25     ;1067 x(3) <- c(25)       load x3 with ptr to Print Not Found func
 JMA 3,0      ;1068 Unconditional jump to not found func

 SMR 0,1,0    ;1069 Compare character at x(1) to char in r(0)  (IE compare paragraph char to target_word char)
 AIX 1,1      ;1070    Increment x(1) by 1
 AIX 2,1      ;1071    Increment x(2) by 1
 SETCCE 0     ;1072 If they are the same character, then r(0) will hold value 0
 JZ 3,0       ;1073 jump to x(3) = <Start of this function> = 1059

 STR 1,0,16   ;1074 c(16) <- r(1)          Save current paragraph character into c(16)
 SMR 1,0,14   ;1075 r(1) <- r(1) - c(14)   compare current char to " " space character
 SETCCE 1     ;1076
 JNE 3,22     ;1077 If current char != " ", then jump to 1081(=1059+22). Else...
 LDR 2,0,11   ;1078 r(2) <- c(11)      load word count into r2
 AIR 2,1      ;1079 r(2) <- r(2) + 1   increment word count by 1
 STR 2,0,11   ;1080 c(11) <- r(2)      Store word count back to memory

 LDR 1,0,16   ;1081 r(1) <- c(16)          load r(1) with current character (again)
 SMR 1,0,15   ;1082 r(1) <- r(1) - c(15)   compare current char to "." period character
 SETCCE 1     ;1083
 JNE 3,31     ;1084 If current char != "." then jump to 1090(=1059+31)
 LDR 2,0,10   ;1085 r(2) <- c(10)          load value 0 into r2
 STR 2,0,11   ;1086 c(11) <- r(2)          set word count to 0
 LDR 2,0,12   ;1087 r(2) <- c(12)          load sentence count into r2
 AIR 2,1      ;1088 r(2) <- r(2) + 1       increment sentence count by 1
 STR 2,0,12   ;1089 c(12) <- r(2)

 LDR 2,0,13    ;1090 r(2) <- c(13)     load r2 with ptr to current paragraph character
 AIR 2,1       ;1091 r(2) <- r(2) + 1  Add 1 to r2
 STR 2,0,13    ;1092 c(13) <- r(2)     Store r2 back to memory
 LDX 1,13      ;1093 x(1) <- c(13)     load x1 with ptr to start of user input paragraph
 LDX 2,9       ;1094 x(2) <- c(9)      load x2 with ptr to start of target word
 JMA 3,0       ;1095 Unconditional jump to top of function again (but with incremented paragraph character target)




 LOC 1100     ; Print_Found function
 LDR 3,0,20   ; load newline character into r3
 OUT 3,1      ; print newline character

 LDX 1,28     ; x(1) <- c(28)  load x3 with ptr to "Match for: "
 JSR 0,21,1   ; Print string function
 LDX 1,9      ; const ptr to target word
 JSR 0,21,1   ; Print target word

 LDR 3,0,20   ; load newline character into r3
 OUT 3,1      ; print newline character

 LDX 1,29     ; x(1) <- c(29)         load x1 with ptr to Sentence #"
 JSR 0,21,1   ; print string function
 LDR 0,0,17   ; r(0) <- c(17)         load r0 with bitmask for number to ascii conversion
 LDR 1,0,12   ; r(1) <- c(12)         load r1 with sentence count
 ORR 1,0      ; r(1) <- r(1) | r(0)   convert r1 to ascii character
 OUT 1,1      ; print character in r(1)
 LDR 3,0,20   ; load newline character into r3
 OUT 3,1      ; print newline character

 LDX 1,30     ; x(1) <- c(30)        load x1 with ptr to "Word #"
 JSR 0,21,1   ; print string function
 LDR 0,0,17   ; r(0) <- c(17)         load r0 with bitmask for number to ascii conversion
 LDR 1,0,11   ; r(1) <- c(11)        load reg 1 with word count
 ORR 1,0      ; r(1) <- r(1) | r(0)  convert r1 to ascii character
 OUT 1,1      ; print character in r(1)
 hlt


 LOC 1200
 data 83                 ;1200 [S] earch for word:
 data 101                ;1201 [e] arch for word:
 data 97                 ;1202 [a] rch for word:
 data 114                ;1203 [r] ch for word:
 data 99                 ;1204 [c] h for word:
 data 104                ;1205 [h]  for word:
 data 32                 ;1206 [ ] for word:
 data 102                ;1207 [f] or word:
 data 111                ;1208 [o] r word:
 data 114                ;1209 [r]  word:
 data 32                 ;1210 [ ] word:
 data 119                ;1211 [w] ord:
 data 111                ;1212 [o] rd:
 data 114                ;1213 [r] d:
 data 100                ;1214 [d] :
 data 58                 ;1215 [:]
 data 32                 ;1216 [ ]
 data 10                 ;1217 \n
 data 000000             ;1218 end of string

 LOC 1219
 data 87                 ;1219 [W] ord not found.
 data 111                ;1220 [o] rd not found.
 data 114                ;1221 [r] d not found.
 data 100                ;1222 [d]  not found.
 data 32                 ;1223 [ ] not found.
 data 110                ;1224 [n] ot found.
 data 111                ;1225 [o] t found.
 data 116                ;1226 [t]  found.
 data 32                 ;1227 [ ] found.
 data 102                ;1228 [f] ound.
 data 111                ;1229 [o] und.
 data 117                ;1230 [u] nd.
 data 110                ;1231 [n] d.
 data 100                ;1232 [d] .
 data 46                 ;1233 [.]
 data 10                 ;1234 \n
 data 000000             ;1235 end of string

 LOC 1236
 data 77                 ;1236 [M] atch for:
 data 97                 ;1237 [a] tch for:
 data 116                ;1238 [t] ch for:
 data 99                 ;1239 [c] h for:
 data 104                ;1240 [h]  for:
 data 32                 ;1241 [ ] for:
 data 102                ;1242 [f] or:
 data 111                ;1243 [o] r:
 data 114                ;1244 [r] :
 data 58                 ;1245 [:]
 data 32                 ;1246 [ ]
 data 10                 ;1247 \n
 data 000000             ;1248 end of string

 LOC 1249
 data 83                 ;1249 [S] entence #
 data 101                ;1250 [e] ntence #
 data 110                ;1251 [n] tence #
 data 116                ;1252 [t] ence #
 data 101                ;1253 [e] nce #
 data 110                ;1254 [n] ce #
 data 99                 ;1255 [c] e #
 data 101                ;1256 [e]  #
 data 32                 ;1257 [ ] #
 data 35                 ;1258 [#]
 data 10                 ;1259 \n
 data 000000             ;1260 end of string

 LOC 1261
 data 87                 ;1261 [W] ord #
 data 111                ;1262 [o] rd #
 data 114                ;1263 [r] d #
 data 100                ;1264 [d]  #
 data 32                 ;1265 [ ] #
 data 35                 ;1266 [#]
 data 10                 ;1267 \n
 data 000000             ;1268 end of string


 LOC 1500     ; Print not found function
 LDX 1,27     ; x(1) <- c(27)  load x1 with ptr to stirng "Word not found"
 JSR 0,21,1   ; print string function
 hlt

 LOC 1536     ; Octal 3000 main function
 LDX 1,6      ; x(1) <- c(6)   load x1 with ptr to string "Please enter a sentence "
 JSR 0,21,1   ; Print string function
 LDX 3,8      ; 1042 x(3) <- c(8)  load x3 with ptr to start of user input space
 JSR 0,22,1   ; Read in paragraph
 LDX 1,8      ; x(1) <- c(8)   load x1 with ptr to string  <user inputted sentence>
 JSR 0,21,1   ; Print paragraph back to them

 LDX 1,7      ; x(1) <- c(7)   load x1 with ptr to string "Please enter target word "
 JSR 0,21,1   ; Print string function
 LDX 3,9      ; 1042 x(3) <- c(9)  load x3 with ptr to start of user target word
 JSR 0,22,1   ; Read in paragraph
 LDX 1,9      ; x(1) <- c(9)   load x1 with ptr to string  <user inputted sentence>
 JSR 0,21,1   ; Print user target word back to them

 JSR 0,23,1   ; Find target word in paragraph function
 hlt



